{"version":3,"file":"static/js/762.c7dea758.chunk.js","mappings":"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","sources":["API/defaultImg.jsx","API/api.js","components/ReviwesInfo/ReviewsInfo.styled.jsx","components/ReviwesInfo/ReviewsInfo.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import defaultImage from 'images/defaultImage.jpg';\n\nconst getImagePosterPath = (path)=> {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n\nexport default getImagePosterPath;\n\n","import axios from 'axios';\nimport getImagePosterPath from './defaultImg';\n\nconst API_KEY =  '8969e643fd094287d471f08caa30017f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies(page,controller) {\n  const responce = await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,  { signal: controller.signal });\n\n  const movies = responce.data.results.map(({ id, title, poster_path}) => {return {id, title, posterPath: getImagePosterPath(poster_path)}});\n\n  return {movies, totalPages: responce.data.total_pages};\n}\n\nexport async function getMovieByQuery(query, page=1, controller) {\n    const responce = await axios.get(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,  { signal: controller.signal });\n\n    const movies = responce.data.results.map(({id, title, poster_path })=> {\n        return {id, title, posterPath: getImagePosterPath(poster_path), }\n    })\n\n    return{ movies, totalPages: responce.data.total_pages,\n    totalResults: responce.data.total_results};\n};\n\nexport async function getMovieDetails (movieId, controller) {\n    const responce = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`, { signal: controller.signal});\n    const { title, poster_path, overview, genres, vote_average, release_date } =\n    responce.data;\n\n    return {\n        title,\n        posterPath: getImagePosterPath(poster_path),\n        overview,\n        genres: genres.map(genre => genre.name).join(', '),\n        vote: vote_average.toFixed(1),\n        year: release_date.slice(0, 4),\n      };\n};\n\nexport async function getMoviesCast (movieId, controller) {\n    const responce = await axios.get(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`,{ signal: controller.signal});\n    const actors = responce.data.cast.map(({id, name, profile_path, character}) => \n    {return {id, name, profilePath: getImagePosterPath(profile_path), character}});\n    return actors; \n};\n\nexport async function getMovieRewies(movieId, controller) {\n    const responce = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`,{ signal: controller.signal});\n    const reviews = responce.data.results.map(({id, author,content}) => {return {id, author, content}});\n    return reviews;\n}","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  gap: 15px;\n  padding: 0;\n`;\n\nexport const ReviewItem = styled.li`\n  padding: 15px;\n  list-style: none;\n  border: 3px solid #76d9ec;\n  border-radius: 10px;\n`;\n\nexport const ReviewTitle = styled.h2`\n    color: #76d9ec;\n`\nexport const View = styled.p`\ncolor: #76d9ec;\nfont-size: 17px;\n`","import PropTypes from 'prop-types';\nimport { ReviewsList, ReviewItem, ReviewTitle, View } from './ReviewsInfo.styled';\n\nconst ReviewsInfo = ({reviews}) => {\n     return(\n        <ReviewsList>\n            {reviews.map(({id, author, content}) => { return  <ReviewItem key={id}>\n                    <ReviewTitle>{author}</ReviewTitle>\n                    <View>{content}</View>\n                </ReviewItem>\n            }) }\n        </ReviewsList>\n     )\n}\n\nReviewsInfo.propTypes ={\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            author: PropTypes.string,\n            content: PropTypes.string,\n        }).isRequired\n    ).isRequired\n};\n\nexport default ReviewsInfo;","import styled from '@emotion/styled';\n\nexport const MessageWrapper = styled.div`\n  margin-top: 30px;\n  text-align: center;\n`;\n\nexport const MessageText = styled.p`\n    font-size: 20px;\n    color: #76d9ec;\n`","import { MessageWrapper, MessageText } from \"./Message.styled\"\n\nconst Message = () => {\n    return(\n        <MessageWrapper>\n            <MessageText>There are no reviews for this movie</MessageText>\n        </MessageWrapper>\n    )\n}\n\nexport default Message;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieRewies } from \"API/api\";\n\nimport ReviewsInfo from \"components/ReviwesInfo/ReviewsInfo\";\nimport Loader from \"components/Loader/Loader\";\nimport { toast } from \"react-toastify\";\nimport Message from \"components/Message/Message\";\n\nconst Reviews = () => {\n    const {movieId} = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [status, setStatus] = useState('idle');\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if(!movieId) return;\n        const abortController = new AbortController();\n        async function addMovieReviews() {\n            setStatus('pending');\n            try{\n                 const reviewsMovie = await getMovieRewies(movieId, abortController);\n                 setReviews(reviewsMovie);\n                 setStatus('resolved');\n            } catch (error) {\n                setError(error.message);\n                setStatus('rejected')\n            }\n        };\n        addMovieReviews(movieId, abortController);\n        return ()=> {\n            abortController.abort();\n        }\n    }, [movieId]);\n\n\n    useEffect(() => {\n        if(error === 'canceled'){\n            return;\n        }\n        if(error) {\n            toast.error(error);\n            setError('')\n        }\n    }, [error]);\n\n    return (<>\n    {status === 'pending' && <Loader/>}\n    {status === 'resolved' && reviews.length !== 0 ? (<ReviewsInfo  reviews={reviews}/>) : (\n        <Message/>\n    )}\n    </>\n    )}\n\nexport default Reviews;\n"],"names":["path","API_KEY","BASE_URL","getTrendingMovies","page","controller","axios","signal","responce","movies","data","results","map","id","title","poster_path","posterPath","getImagePosterPath","totalPages","total_pages","getMovieByQuery","query","totalResults","total_results","getMovieDetails","movieId","overview","genres","vote_average","release_date","genre","name","join","vote","toFixed","year","slice","getMoviesCast","actors","cast","profile_path","character","profilePath","getMovieRewies","reviews","author","content","ReviewsList","styled","ReviewItem","ReviewTitle","View","MessageWrapper","MessageText","useParams","useState","setReviews","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieReviews","abort","reviewsMovie","message","toast","Loader","length"],"sourceRoot":""}