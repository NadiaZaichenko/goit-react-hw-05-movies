{"version":3,"file":"static/js/698.5ea64edb.chunk.js","mappings":"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","sources":["API/defaultImg.jsx","API/api.js","components/Actor/Actor.styled.jsx","components/Actor/Actor.jsx","components/ActorsGallery/ActorsGallery.styled.jsx","components/ActorsGallery/ActorsGallery.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import defaultImage from 'images/defaultImage.jpg';\n\nconst getImagePosterPath = (path)=> {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n\nexport default getImagePosterPath;\n\n","import axios from 'axios';\nimport getImagePosterPath from './defaultImg';\n\nconst API_KEY =  '8969e643fd094287d471f08caa30017f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies(page,controller) {\n  const responce = await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,  { signal: controller.signal });\n\n  const movies = responce.data.results.map(({ id, title, poster_path}) => {return {id, title, posterPath: getImagePosterPath(poster_path)}});\n\n  return {movies, totalPages: responce.data.total_pages};\n}\n\nexport async function getMovieByQuery(query, page=1, controller) {\n    const responce = await axios.get(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,  { signal: controller.signal });\n\n    const movies = responce.data.results.map(({id, title, poster_path })=> {\n        return {id, title, posterPath: getImagePosterPath(poster_path), }\n    })\n\n    return{ movies, totalPages: responce.data.total_pages,\n    totalResults: responce.data.total_results};\n};\n\nexport async function getMovieDetails (movieId, controller) {\n    const responce = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`, { signal: controller.signal});\n    const { title, poster_path, overview, genres, vote_average, release_date } =\n    responce.data;\n\n    return {\n        title,\n        posterPath: getImagePosterPath(poster_path),\n        overview,\n        genres: genres.map(genre => genre.name).join(', '),\n        vote: vote_average.toFixed(1),\n        year: release_date.slice(0, 4),\n      };\n};\n\nexport async function getMoviesCast (movieId, controller) {\n    const responce = await axios.get(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`,{ signal: controller.signal});\n    const actors = responce.data.cast.map(({id, name, profile_path, character}) => \n    {return {id, name, profilePath: getImagePosterPath(profile_path), character}});\n    return actors; \n};\n\nexport async function getMovieRewies(movieId, controller) {\n    const responce = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`,{ signal: controller.signal});\n    const reviews = responce.data.results.map(({id, author,content}) => {return {id, author, content}});\n    return reviews;\n}","import styled from '@emotion/styled';\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style: none;\n  height: auto;\n  width: calc((100% - 100px) / 6);\n  border-radius: 10px;\n  background-color: #125790;\n \n`;\nexport const ActorPhoto = styled.img`\n  width: 100%;\n  height: 250px;\n  object-fit: cover;\n  border-radius: 10px;\n`;\n\nexport const ActorInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n`;\n\nexport const ActorInfoText = styled.p`\n  margin: 0;\n  color: #76d9ec;\n  font-size: 18px;\n`;\n\nexport const ActorSpanText = styled.span`\n    font-weight: 700;\n`","import PropTypes from 'prop-types';\nimport { ActorCard,  ActorPhoto, ActorInfoText,ActorInfoWrapper, ActorSpanText } from './Actor.styled';\n\n\nconst Actor = ({actor: {name, profilePath, character}}) => {\n    return (\n        <ActorCard>\n          <ActorPhoto src={profilePath} alt={name} />\n          <ActorInfoWrapper>\n            <ActorInfoText>\n              <ActorSpanText>Name:</ActorSpanText> {name}\n            </ActorInfoText>\n            <ActorInfoText>\n              <ActorSpanText>Character:</ActorSpanText> {character}\n            </ActorInfoText>\n          </ActorInfoWrapper>\n        </ActorCard>\n      );\n}\nActor.propTypes = {\n    actor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profilePath: PropTypes.string,\n        character: PropTypes.string.isRequired\n    }).isRequired\n}\nexport default Actor;","import styled from '@emotion/styled';\n\nexport const ActorsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 15px;\n  margin-top: 30px;\n  padding: 0;\n`;","import Actor from \"components/Actor/Actor\"\nimport PropTypes from 'prop-types'\nimport { ActorsList } from \"./ActorsGallery.styled\"\n\nconst ActorsGallery = ({actors}) => {\n    return (\n       <ActorsList>\n        {actors.map(actor => (\n            <Actor key ={actor.id}\n            actor={actor}/>\n        ))}\n       </ActorsList>\n    )\n}\nActorsGallery.propTypes={\nactors: PropTypes.arrayOf(\n    PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n        character: PropTypes.string.isRequired,\n}).isRequired).isRequired\n}\n\nexport default ActorsGallery;","import { useState, useEffect } from \"react\";\nimport {toast} from 'react-toastify'\nimport { useParams } from \"react-router-dom\";\nimport ActorsGallery from \"components/ActorsGallery/ActorsGallery\";\nimport { getMoviesCast } from \"API/api\";\nimport Loader from \"components/Loader/Loader\";\n\nconst Cast = () => { \n    const {movieId} = useParams();\n    const [cast, setCast] = useState([]);\n    const [status, setStatus] = useState('idle');\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if(!movieId) {\n             return;\n        }\n        const abortController = new AbortController();\n        async function addMovieCast() {\n            setStatus('pending');\n            try{ \n            const castMovie = await getMoviesCast(movieId, abortController);\n            setCast(castMovie);\n            setStatus('resolved');\n            } catch(error) {\n                setError(error.message);\n                setStatus('rejected');\n            }};\n        addMovieCast(movieId, abortController);\n        return() => {\n            abortController.abort();\n        }\n    }, [movieId]);\n\n    useEffect(() => {\n        if(error === 'canceled') {\n            return;\n        };\n        if(error ) {\n            toast.error(error);\n            setError('');\n        }\n    }, [error]);\n\n\n    return (\n        <>\n        {status ==='pending' && <Loader/>}\n        {status === 'resolved' && cast.length !== 0 && <ActorsGallery actors={cast}/>}\n        </>\n    )\n}\n\nexport default Cast;"],"names":["path","API_KEY","BASE_URL","getTrendingMovies","page","controller","axios","signal","responce","movies","data","results","map","id","title","poster_path","posterPath","getImagePosterPath","totalPages","total_pages","getMovieByQuery","query","totalResults","total_results","getMovieDetails","movieId","overview","genres","vote_average","release_date","genre","name","join","vote","toFixed","year","slice","getMoviesCast","actors","cast","profile_path","character","profilePath","getMovieRewies","reviews","author","content","ActorCard","styled","ActorPhoto","ActorInfoWrapper","ActorInfoText","ActorSpanText","actor","src","alt","ActorsList","useParams","useState","setCast","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieCast","abort","castMovie","message","toast","Loader","length"],"sourceRoot":""}